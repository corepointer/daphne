# Copyright 2024 The DAPHNE Consortium
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script tests various situations where a unary minus is used.
# Noteworthy special cases:
# - print(1-1): Minus without spaces caused an error
# - unary minus (incl expressions) are supported with cli params
# - matrix literals (was problematic before)
# - int64 minimum needs special treatment
# - unary minus in front of a builtin that yields matrix output throws an error at the moment
#   (commented cases below)

print("1-1: ",0,0);
print(1-1);
print(-123);
// min negative int64_t (-2^63)
print(-9223372036854775808);
matLit1 = [1,3-2,$a,-8](2,2);
print(matLit1);
print(sum(matLit1));
C=-4;
D=-log(123,10);
E=log(123,10);
print(D);
print(E);
print($a);
print($b);
a = $a;
b = $b;
print(a);
print(b);
F=diagMatrix(seq(0,3,1));
print($input);
print(-sum(F));

# FIXME: The statement below does not work and gives the following error:
# loc("tmp.daph":48:13): error: failed to legalize operation 'builtin.unrealized_conversion_cast' that was explicitly marked illegal
#print(-exp(F));
#print(-F);
print(pow(2,2));
print(pow([2,2],2));
print(-pow(2,2));
print(-1*pow([2,2],2));
# FIXME: The statement below should yield the same result as the work around one line above
#print(-pow([2,2],2));
matLit2 = [-sum(matLit1),-3-2,C,
           $a-$b,-$b-$a,-C,
           sum(matLit1),-$b+$a,D*E,
           -exp(E),b,a-b,
           exp(E),-b,-a-b](5,3);
print(matLit2);
